A simple txt file to keep track of my progress and how I designed this application

For this project I have chosen java as my language built with gradle. Building java projects with vscode is not straightforward. I referred to this page (https://code.visualstudio.com/docs/java/java-tutorial) to setup java on vscode

For build tools I decided to choose gradle as it is go-to for all the projects in recent times. The other option was maven which I did not opt for. You can think of Gradle as goodness of Ant and Maven put together minus the noise of XML. And scriptability with groovy is very big plus.
Gradle build files are less verbose as they are written in groovy.
It provides very nice DSL for writing build tasks.

The objective is to read the file, calculate the space it takes. Perform the compression and see how much space is saved and also check if decoding happens without any issues.

For the compression of the file, I am assuming that the text is in the form of a string. Any numbers present in the text will be treated as string and handled accordingly.
The algorithm I will be using is Huffman algorithm which is a lossless data compression algorithm.

The algorithm is based on the frequency of the characters in the text. The frequency of the characters is calculated and the characters are sorted based on the frequency, this is done to save more space as compared to treating all characters equally. The more frequently used characters can be encoded in short bits and the rare charas into longer bits to save space.
Refer to (https://www.javatpoint.com/huffman-coding-java) for implementation in java 

This project can be divided into three parts:
    * Reading the file
    * Compressing/Encoding the file
    * Decoding the file

<-------------------------------------------------------------------------->

Starting with reading the file. (https://www.baeldung.com/reading-file-in-java)

There are different ways of taking file input such as using FileUtils class of the commons-io Library, using the bufferedReader class, using the NIO package using the readAllLines method, reading with a scanner or converting the text using streamTokenizer.
The most widely used methods are either using BufferedReader or using the NIO package. I will be using the BufferedReader for my project.

I faced a big issue while compiling and running the file input part of the program. The terminal did not recognize me importing class from another java file for some reason. This was despite compiling both the java files together and then running them. 
Instead of this I directly hit the debug and run button instead of doing the traditional javac and java command. Now the problem was providing command line input, had to create run configurations and add the filename as args to the run configuration in the launch.json file. This is a temporary fix which I need to take care of in the end to dynamically accept input file path. For now, the file input part of the program works as intended.

Another small issue is I am recieving the file contents in a try block and therefore cannot access it outisde the block. I need to use te contents in other try catch blocks as well for encoding, decoding etc.
In order to bypass this, I declared the variable at the class level to keep it in the scope of the Main class. Also had to declare it static coz static method.

<-------------------------------------------------------------------------->

The next part is to compress the file using Huffman encoding for which I need to implement binary tree

For this, I have created node class that stores the character and its frequency. I will create such nodes for every character present in the text data passed as input and push it into a queue in ascending order.

Now take 2 nodes at a time and start creating a tree by combining the 2 nodes to create 1 and keep doing it until we have one last node which will be the root node.
It would look like this: Input text: ccaececc

                     root node(8)

                    /           \

                   (3)           c(5)

                /       \      

              a(1)      e(2)   

After creating tree, we need to assign the encoding bit to each character in the tree.
We start from the root node and keep traversing to the leaf nodes by calling the encoding function recursively and each time we move left we add a 0 and for each right move we add a 1.
Finally the tree would look like this:

                    root node(freq: 8)

            [0]     /           \    [1]
                   /             \

                (freq: 3)           c(freq:5)  


        [0]     /           \     [1]   
               /             \  

            a(freq: 1)      e(freq: 2)   

The encoding can be read as:

a -> 00
e -> 01
c -> 1

This encoding will be stored in a HashMap for each character in the text. This will be required by the decoding module to decode the code.
Now we have the encoding for each character in the text. We can now encode the text using the encoding and display the code to the user.

<-------------------------------------------------------------------------->

The decoding of the huffman caode can be done in 2 ways:

- Method 1-

Iterate through the encoded string and for each character traverse through the tree until we reach the leaf node. This leaf node will imply one character in the text.Now we continue the same process for all the bits in the encoded string to retrieve the original text.
Use this method if system has good storage but lesser compute.


- Method 2-

Iterate through the encoded string from the last element and try to match the largest substring that is a code for a character which we can get from the map. A simple example would look like:

Suppose,

a -> 00
e -> 01
c -> 1

And the encoded string is: 00110001

We start from the end and consider the entire string 00110001, this does not match with any code in our map so now we move backwards

Now we check for [0011000] 1, this is also no match
Next [001100]01, nope
Now we check for [00110]001, nope
Now we check for [0011]0001, nope
Now we check for [001]10001, nope
Now we check for [00]110001, this is a match for a. So now we have decoded "a" and we remove its string from the code

Now we check for 110001 and follow the same steps

The decoded string is accae

Use this method when storage of the tree might be issue but computing through the string matching O(n^2) is manageable by system.

<-------------------------------------------------------------------------->


Now that the we have the decoded string, I faced a new issue. The string accae being encoded as 110001 will look like this while storage:

accae -> 5 bytes
110001 -> 6 bytes

The problem is storing the code as a string which defeats the purpose of the compression algorithm. We need to store the data in the form of bits.

I couldnt find much on storing data as bits but found an interesting concept of BitSet. I can use this BitSet which is basically used to track which index has a 0 and which has 1
So using this, I can transmit the bitSet rather than the encoded string. Reconstruct the Encoded string on the recieving system and decode it using my algorithm.

The main idea is to reduce the burden during data transmission which we have accomplished by transmitting the bitSet rather than full encoded string.

Once this is done, the outputWriter will write dump the output in a new or existing file.