A simple txt file to keep track of my progress and how I designed this application

For this project I have chosen java as my language built with gradle. Building java projects with vscode is not straightforward. I referred to this page (https://code.visualstudio.com/docs/java/java-tutorial) to setup java on vscode

For build tools I decided to choose gradle as it is go-to for all the projects in recent times. The other option was maven which I did not opt for. You can think of Gradle as goodness of Ant and Maven put together minus the noise of XML. And scriptability with groovy is very big plus.
Gradle build files are less verbose as they are written in groovy.
It provides very nice DSL for writing build tasks.

The objective is to read the file, calculate the space it takes. Perform the compression and see how much space is saved and also check if decoding happens without any issues.

For the compression of the file, I am assuming that the text is in the form of a string. Any numbers present in the text will be treated as string and handled accordingly.
The algorithm I will be using is Huffman algorithm which is a lossless data compression algorithm.

The algorithm is based on the frequency of the characters in the text. The frequency of the characters is calculated and the characters are sorted based on the frequency, this is done to save more space as compared to treating all characters equally. The more frequently used characters can be encoded in short bits and the rare charas into longer bits to save space.
Refer to (https://www.javatpoint.com/huffman-coding-java) for implementation in java 

This project can be divided into three parts:
    * Reading the file
    * Compressing/Encoding the file
    * Decoding the file

--------------------------------------------------------------------------

Starting with reading the file. (https://www.baeldung.com/reading-file-in-java)

There are different ways of taking file input such as using FileUtils class of the commons-io Library, using the bufferedReader class, using the NIO package using the readAllLines method, reading with a scanner or converting the text using streamTokenizer.
The most widely used methods are either using BufferedReader or using the NIO package. I will be using the BufferedReader for my project.

I faced a big issue while compiling and running the file input part of the program. The terminal did not recognize me importing class from another java file for some reason. This was despite compiling both the java files together and then running them. 
Instead of this I directly hit the debug and run button instead of doing the traditional javac and java command. Now the problem was providing command line input, had to create run configurations and add the filename as args to the run configuration in the launch.json file. This is a temporary fix which I need to take care of in the end to dynamically accept input file path. For now, the file input part of the program works as intended.

Another small issue is I am recieving the file contents in a try block and therefore cannot access it outisde the block. I need to use te contents in other try catch blocks as well for encoding, decoding etc.
In order to bypass this, I declared the variable at the class level to keep it in the scope of the Main class. Also had to declare it static coz static method.
--------------------------------------------------------------------------

The next part is to compress the file using Huffman encoding for which I need to implement binary trees
